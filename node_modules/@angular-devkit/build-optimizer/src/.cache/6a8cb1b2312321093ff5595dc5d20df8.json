{"remainingRequest":"/home/gabriel/Documentos/daycare-final/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/gabriel/Documentos/daycare-final/node_modules/ngx-bootstrap/carousel/carousel.component.js","dependencies":[{"path":"/home/gabriel/Documentos/daycare-final/node_modules/ngx-bootstrap/carousel/carousel.component.js","mtime":499162500000},{"path":"/home/gabriel/Documentos/daycare-final/node_modules/cache-loader/dist/cjs.js","mtime":1528079641267},{"path":"/home/gabriel/Documentos/daycare-final/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// tslint:disable:max-file-line-count\n/***\n * pause (not yet supported) (?string='hover') - event group name which pauses\n * the cycling of the carousel, if hover pauses on mouseenter and resumes on\n * mouseleave keyboard (not yet supported) (?boolean=true) - if false\n * carousel will not react to keyboard events\n * note: swiping not yet supported\n */\n/****\n * Problems:\n * 1) if we set an active slide via model changes, .active class remains on a\n * current slide.\n * 2) if we have only one slide, we shouldn't show prev/next nav buttons\n * 3) if first or last slide is active and noWrap is true, there should be\n * \"disabled\" class on the nav buttons.\n * 4) default interval should be equal 5000\n */\nimport { Component, EventEmitter, Input, NgZone, Output } from '@angular/core';\nimport { isBs3, LinkedList } from '../utils/index';\nimport { CarouselConfig } from './carousel.config';\nexport var Direction = /*@__PURE__*/ (function (Direction) {\n    Direction[Direction[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    Direction[Direction[\"NEXT\"] = 1] = \"NEXT\";\n    Direction[Direction[\"PREV\"] = 2] = \"PREV\";\n    return Direction;\n})({});\n/**\n * Base element to create carousel\n */\nvar CarouselComponent = /*@__PURE__*/ (function () {\n    function CarouselComponent(config, ngZone) {\n        this.ngZone = ngZone;\n        /** Will be emitted when active slide has been changed. Part of two-way-bindable [(activeSlide)] property */\n        this.activeSlideChange = new EventEmitter(false);\n        this._slides = new LinkedList();\n        this.destroyed = false;\n        Object.assign(this, config);\n    }\n    Object.defineProperty(CarouselComponent.prototype, \"activeSlide\", {\n        get: function () {\n            return this._currentActiveSlide;\n        },\n        set: /** Index of currently displayed slide(started for 0) */ function (index) {\n            if (this._slides.length && index !== this._currentActiveSlide) {\n                this._select(index);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CarouselComponent.prototype, \"interval\", {\n        get: /**\n           * Delay of item cycling in milliseconds. If false, carousel won't cycle\n           * automatically.\n           */ function () {\n            return this._interval;\n        },\n        set: function (value) {\n            this._interval = value;\n            this.restartTimer();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CarouselComponent.prototype, \"slides\", {\n        get: function () {\n            return this._slides.toArray();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CarouselComponent.prototype, \"isBs4\", {\n        get: function () {\n            return !isBs3();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CarouselComponent.prototype.ngOnDestroy = function () {\n        this.destroyed = true;\n    };\n    /**\n     * Adds new slide. If this slide is first in collection - set it as active\n     * and starts auto changing\n     * @param slide\n     */\n    /**\n       * Adds new slide. If this slide is first in collection - set it as active\n       * and starts auto changing\n       * @param slide\n       */\n    CarouselComponent.prototype.addSlide = /**\n       * Adds new slide. If this slide is first in collection - set it as active\n       * and starts auto changing\n       * @param slide\n       */\n        function (slide) {\n            this._slides.add(slide);\n            if (this._slides.length === 1) {\n                this._currentActiveSlide = void 0;\n                this.activeSlide = 0;\n                this.play();\n            }\n        };\n    /**\n     * Removes specified slide. If this slide is active - will roll to another\n     * slide\n     * @param slide\n     */\n    /**\n       * Removes specified slide. If this slide is active - will roll to another\n       * slide\n       * @param slide\n       */\n    CarouselComponent.prototype.removeSlide = /**\n       * Removes specified slide. If this slide is active - will roll to another\n       * slide\n       * @param slide\n       */\n        function (slide) {\n            var _this = this;\n            var remIndex = this._slides.indexOf(slide);\n            if (this._currentActiveSlide === remIndex) {\n                // removing of active slide\n                var nextSlideIndex_1 = void 0;\n                if (this._slides.length > 1) {\n                    // if this slide last - will roll to first slide, if noWrap flag is\n                    // FALSE or to previous, if noWrap is TRUE in case, if this slide in\n                    // middle of collection, index of next slide is same to removed\n                    // if this slide last - will roll to first slide, if noWrap flag is\n                    // FALSE or to previous, if noWrap is TRUE in case, if this slide in\n                    // middle of collection, index of next slide is same to removed\n                    nextSlideIndex_1 = !this.isLast(remIndex)\n                        ? remIndex\n                        : this.noWrap ? remIndex - 1 : 0;\n                }\n                this._slides.remove(remIndex);\n                // prevents exception with changing some value after checking\n                setTimeout(function () {\n                    _this._select(nextSlideIndex_1);\n                }, 0);\n            }\n            else {\n                this._slides.remove(remIndex);\n                var currentSlideIndex_1 = this.getCurrentSlideIndex();\n                setTimeout(function () {\n                    // after removing, need to actualize index of current active slide\n                    // after removing, need to actualize index of current active slide\n                    _this._currentActiveSlide = currentSlideIndex_1;\n                    _this.activeSlideChange.emit(_this._currentActiveSlide);\n                }, 0);\n            }\n        };\n    /**\n     * Rolling to next slide\n     * @param force: {boolean} if true - will ignore noWrap flag\n     */\n    /**\n       * Rolling to next slide\n       * @param force: {boolean} if true - will ignore noWrap flag\n       */\n    CarouselComponent.prototype.nextSlide = /**\n       * Rolling to next slide\n       * @param force: {boolean} if true - will ignore noWrap flag\n       */\n        function (force) {\n            if (force === void 0) {\n                force = false;\n            }\n            this.activeSlide = this.findNextSlideIndex(Direction.NEXT, force);\n        };\n    /**\n     * Rolling to previous slide\n     * @param force: {boolean} if true - will ignore noWrap flag\n     */\n    /**\n       * Rolling to previous slide\n       * @param force: {boolean} if true - will ignore noWrap flag\n       */\n    CarouselComponent.prototype.previousSlide = /**\n       * Rolling to previous slide\n       * @param force: {boolean} if true - will ignore noWrap flag\n       */\n        function (force) {\n            if (force === void 0) {\n                force = false;\n            }\n            this.activeSlide = this.findNextSlideIndex(Direction.PREV, force);\n        };\n    /**\n     * Rolling to specified slide\n     * @param index: {number} index of slide, which must be shown\n     */\n    /**\n       * Rolling to specified slide\n       * @param index: {number} index of slide, which must be shown\n       */\n    CarouselComponent.prototype.selectSlide = /**\n       * Rolling to specified slide\n       * @param index: {number} index of slide, which must be shown\n       */\n        function (index) {\n            this.activeSlide = index;\n        };\n    /**\n     * Starts a auto changing of slides\n     */\n    /**\n       * Starts a auto changing of slides\n       */\n    CarouselComponent.prototype.play = /**\n       * Starts a auto changing of slides\n       */\n        function () {\n            if (!this.isPlaying) {\n                this.isPlaying = true;\n                this.restartTimer();\n            }\n        };\n    /**\n     * Stops a auto changing of slides\n     */\n    /**\n       * Stops a auto changing of slides\n       */\n    CarouselComponent.prototype.pause = /**\n       * Stops a auto changing of slides\n       */\n        function () {\n            if (!this.noPause) {\n                this.isPlaying = false;\n                this.resetTimer();\n            }\n        };\n    /**\n     * Finds and returns index of currently displayed slide\n     * @returns {number}\n     */\n    /**\n       * Finds and returns index of currently displayed slide\n       * @returns {number}\n       */\n    CarouselComponent.prototype.getCurrentSlideIndex = /**\n       * Finds and returns index of currently displayed slide\n       * @returns {number}\n       */\n        function () {\n            return this._slides.findIndex(function (slide) { return slide.active; });\n        };\n    /**\n     * Defines, whether the specified index is last in collection\n     * @param index\n     * @returns {boolean}\n     */\n    /**\n       * Defines, whether the specified index is last in collection\n       * @param index\n       * @returns {boolean}\n       */\n    CarouselComponent.prototype.isLast = /**\n       * Defines, whether the specified index is last in collection\n       * @param index\n       * @returns {boolean}\n       */\n        function (index) {\n            return index + 1 >= this._slides.length;\n        };\n    /**\n     * Defines next slide index, depending of direction\n     * @param direction: Direction(UNKNOWN|PREV|NEXT)\n     * @param force: {boolean} if TRUE - will ignore noWrap flag, else will\n     *   return undefined if next slide require wrapping\n     * @returns {any}\n     */\n    /**\n       * Defines next slide index, depending of direction\n       * @param direction: Direction(UNKNOWN|PREV|NEXT)\n       * @param force: {boolean} if TRUE - will ignore noWrap flag, else will\n       *   return undefined if next slide require wrapping\n       * @returns {any}\n       */\n    CarouselComponent.prototype.findNextSlideIndex = /**\n       * Defines next slide index, depending of direction\n       * @param direction: Direction(UNKNOWN|PREV|NEXT)\n       * @param force: {boolean} if TRUE - will ignore noWrap flag, else will\n       *   return undefined if next slide require wrapping\n       * @returns {any}\n       */\n        function (direction, force) {\n            var nextSlideIndex = 0;\n            if (!force &&\n                (this.isLast(this.activeSlide) &&\n                    direction !== Direction.PREV &&\n                    this.noWrap)) {\n                return void 0;\n            }\n            switch (direction) {\n                case Direction.NEXT:\n                    // if this is last slide, not force, looping is disabled\n                    // and need to going forward - select current slide, as a next\n                    nextSlideIndex = !this.isLast(this._currentActiveSlide)\n                        ? this._currentActiveSlide + 1\n                        : !force && this.noWrap ? this._currentActiveSlide : 0;\n                    break;\n                case Direction.PREV:\n                    // if this is first slide, not force, looping is disabled\n                    // and need to going backward - select current slide, as a next\n                    nextSlideIndex =\n                        this._currentActiveSlide > 0\n                            ? this._currentActiveSlide - 1\n                            : !force && this.noWrap\n                                ? this._currentActiveSlide\n                                : this._slides.length - 1;\n                    break;\n                default:\n                    throw new Error('Unknown direction');\n            }\n            return nextSlideIndex;\n        };\n    /**\n     * Sets a slide, which specified through index, as active\n     * @param index\n     * @private\n     */\n    /**\n       * Sets a slide, which specified through index, as active\n       * @param index\n       * @private\n       */\n    CarouselComponent.prototype._select = /**\n       * Sets a slide, which specified through index, as active\n       * @param index\n       * @private\n       */\n        function (index) {\n            if (isNaN(index)) {\n                this.pause();\n                return;\n            }\n            var currentSlide = this._slides.get(this._currentActiveSlide);\n            if (currentSlide) {\n                currentSlide.active = false;\n            }\n            var nextSlide = this._slides.get(index);\n            if (nextSlide) {\n                this._currentActiveSlide = index;\n                nextSlide.active = true;\n                this.activeSlide = index;\n                this.activeSlideChange.emit(index);\n            }\n        };\n    /**\n     * Starts loop of auto changing of slides\n     */\n    /**\n       * Starts loop of auto changing of slides\n       */\n    CarouselComponent.prototype.restartTimer = /**\n       * Starts loop of auto changing of slides\n       */\n        function () {\n            var _this = this;\n            this.resetTimer();\n            var interval = +this.interval;\n            if (!isNaN(interval) && interval > 0) {\n                this.currentInterval = this.ngZone.runOutsideAngular(function () {\n                    return setInterval(function () {\n                        var nInterval = +_this.interval;\n                        _this.ngZone.run(function () {\n                            if (_this.isPlaying &&\n                                !isNaN(_this.interval) &&\n                                nInterval > 0 &&\n                                _this.slides.length) {\n                                _this.nextSlide();\n                            }\n                            else {\n                                _this.pause();\n                            }\n                        });\n                    }, interval);\n                });\n            }\n        };\n    /**\n     * Stops loop of auto changing of slides\n     */\n    /**\n       * Stops loop of auto changing of slides\n       */\n    CarouselComponent.prototype.resetTimer = /**\n       * Stops loop of auto changing of slides\n       */\n        function () {\n            if (this.currentInterval) {\n                clearInterval(this.currentInterval);\n                this.currentInterval = void 0;\n            }\n        };\n    return CarouselComponent;\n}());\nexport { CarouselComponent };\n//# sourceMappingURL=carousel.component.js.map \n",null]}