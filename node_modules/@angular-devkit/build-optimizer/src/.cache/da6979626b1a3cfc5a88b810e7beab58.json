{"remainingRequest":"/home/gabriel/Documentos/daycare-final/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/gabriel/Documentos/daycare-final/node_modules/ng2-toastr/src/toast-container.component.js","dependencies":[{"path":"/home/gabriel/Documentos/daycare-final/node_modules/ng2-toastr/src/toast-container.component.js","mtime":1497919160000},{"path":"/home/gabriel/Documentos/daycare-final/node_modules/cache-loader/dist/cjs.js","mtime":1528079641267},{"path":"/home/gabriel/Documentos/daycare-final/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar toast_options_1 = require(\"./toast-options\");\nvar platform_browser_1 = require(\"@angular/platform-browser\");\nrequire(\"rxjs/add/operator/first\");\nvar Subject_1 = require(\"rxjs/Subject\");\nvar ToastContainer = /*@__PURE__*/ (function () {\n    function ToastContainer(sanitizer, cdr, _zone, options) {\n        this.sanitizer = sanitizer;\n        this.cdr = cdr;\n        this._zone = _zone;\n        this.position = 'fixed';\n        this.toasts = [];\n        this._fresh = true;\n        this._onEnter = new Subject_1.Subject();\n        this._onExit = new Subject_1.Subject();\n        Object.assign(this, options);\n    }\n    ToastContainer.prototype.onEnter = function () {\n        return this._onEnter.asObservable();\n    };\n    ToastContainer.prototype.onExit = function () {\n        return this._onExit.asObservable();\n    };\n    ToastContainer.prototype.addToast = function (toast) {\n        if (this.positionClass.indexOf('top') > 0) {\n            if (this.newestOnTop) {\n                this.toasts.unshift(toast);\n            }\n            else {\n                this.toasts.push(toast);\n            }\n            if (this.toasts.length > this.maxShown) {\n                var diff = this.toasts.length - this.maxShown;\n                if (this.newestOnTop) {\n                    this.toasts.splice(this.maxShown);\n                }\n                else {\n                    this.toasts.splice(0, diff);\n                }\n            }\n        }\n        else {\n            this.toasts.unshift(toast);\n            if (this.toasts.length > this.maxShown) {\n                this.toasts.splice(this.maxShown);\n            }\n        }\n        if (this.animate === null && this._fresh) {\n            this._fresh = false;\n            this._onEnter.next();\n            this._onEnter.complete();\n        }\n        this.cdr.detectChanges();\n    };\n    ToastContainer.prototype.removeToast = function (toast) {\n        if (toast.timeoutId) {\n            clearTimeout(toast.timeoutId);\n            toast.timeoutId = null;\n        }\n        this.toasts = this.toasts.filter(function (t) {\n            return t.id !== toast.id;\n        });\n    };\n    ToastContainer.prototype.removeAllToasts = function () {\n        this.toasts = [];\n    };\n    ToastContainer.prototype.clicked = function (toast) {\n        if (this.onToastClicked) {\n            this.onToastClicked(toast);\n        }\n    };\n    ToastContainer.prototype.anyToast = function () {\n        return this.toasts.length > 0;\n    };\n    ToastContainer.prototype.findToast = function (toastId) {\n        for (var _i = 0, _a = this.toasts; _i < _a.length; _i++) {\n            var toast = _a[_i];\n            if (toast.id === toastId) {\n                return toast;\n            }\n        }\n        return null;\n    };\n    ToastContainer.prototype.onAnimationEnd = function (event) {\n        var _this = this;\n        if (event.toState === 'void' && !this.anyToast()) {\n            this._ngExit();\n        }\n        else if (this._fresh && event.fromState === 'void') {\n            // notify when first animation is done\n            this._fresh = false;\n            this._zone.run(function () {\n                _this._onEnter.next();\n                _this._onEnter.complete();\n            });\n        }\n    };\n    ToastContainer.prototype._ngExit = function () {\n        var _this = this;\n        this._zone.onMicrotaskEmpty.first().subscribe(function () {\n            _this._onExit.next();\n            _this._onExit.complete();\n        });\n    };\n    ToastContainer.prototype.ngOnDestroy = function () {\n        this._ngExit();\n    };\n    ToastContainer.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'toast-container',\n                    template: \"\\n    <div #toastContainer id=\\\"toast-container\\\" [style.position]=\\\"position\\\" class=\\\"{{positionClass}}\\\">\\n      <div *ngFor=\\\"let toast of toasts\\\" [@inOut]=\\\"animate\\\" (@inOut.done)=\\\"onAnimationEnd($event)\\\" class=\\\"toast toast-{{toast.type}}\\\" \\n      (click)=\\\"clicked(toast)\\\">\\n        <div class=\\\"toast-close-button\\\" *ngIf=\\\"toast.config.showCloseButton\\\" (click)=\\\"removeToast(toast)\\\">&times;\\n        </div> \\n        <div *ngIf=\\\"toast.title\\\" class=\\\"{{toast.config.titleClass || titleClass}}\\\">{{toast.title}}</div>\\n        <div [ngSwitch]=\\\"toast.config.enableHTML\\\">\\n          <span *ngSwitchCase=\\\"true\\\" class=\\\"{{toast.config.messageClass || messageClass}}\\\" [innerHTML]=\\\"sanitizer.bypassSecurityTrustHtml(toast.message)\\\"></span>\\n          <span *ngSwitchDefault class=\\\"{{toast.config.messageClass || messageClass}}\\\">{{toast.message}}</span>\\n        </div>             \\n      </div>\\n    </div>\\n    \",\n                    animations: [\n                        core_1.trigger('inOut', [\n                            core_1.state('flyRight, flyLeft', core_1.style({ opacity: 1, transform: 'translateX(0)' })),\n                            core_1.state('fade', core_1.style({ opacity: 1 })),\n                            core_1.state('slideDown, slideUp', core_1.style({ opacity: 1, transform: 'translateY(0)' })),\n                            core_1.transition('void => flyRight', [\n                                core_1.style({\n                                    opacity: 0,\n                                    transform: 'translateX(100%)'\n                                }),\n                                core_1.animate('0.2s ease-in')\n                            ]),\n                            core_1.transition('flyRight => void', [\n                                core_1.animate('0.2s 10ms ease-out', core_1.style({\n                                    opacity: 0,\n                                    transform: 'translateX(100%)'\n                                }))\n                            ]),\n                            core_1.transition('void => flyLeft', [\n                                core_1.style({\n                                    opacity: 0,\n                                    transform: 'translateX(-100%)'\n                                }),\n                                core_1.animate('0.2s ease-in')\n                            ]),\n                            core_1.transition('flyLeft => void', [\n                                core_1.animate('0.2s 10ms ease-out', core_1.style({\n                                    opacity: 0,\n                                    transform: 'translateX(-100%)'\n                                }))\n                            ]),\n                            core_1.transition('void => fade', [\n                                core_1.style({\n                                    opacity: 0,\n                                }),\n                                core_1.animate('0.3s ease-in')\n                            ]),\n                            core_1.transition('fade => void', [\n                                core_1.animate('0.3s 10ms ease-out', core_1.style({\n                                    opacity: 0,\n                                }))\n                            ]),\n                            core_1.transition('void => slideDown', [\n                                core_1.style({\n                                    opacity: 0,\n                                    transform: 'translateY(-200%)'\n                                }),\n                                core_1.animate('0.3s ease-in')\n                            ]),\n                            core_1.transition('slideDown => void', [\n                                core_1.animate('0.3s 10ms ease-out', core_1.style({\n                                    opacity: 0,\n                                    transform: 'translateY(-200%)'\n                                }))\n                            ]),\n                            core_1.transition('void => slideUp', [\n                                core_1.style({\n                                    opacity: 0,\n                                    transform: 'translateY(200%)'\n                                }),\n                                core_1.animate('0.3s ease-in')\n                            ]),\n                            core_1.transition('slideUp => void', [\n                                core_1.animate('0.3s 10ms ease-out', core_1.style({\n                                    opacity: 0,\n                                    transform: 'translateY(200%)'\n                                }))\n                            ]),\n                        ]),\n                    ],\n                },] },\n    ];\n    return ToastContainer;\n}());\nexports.ToastContainer = ToastContainer;\n",null]}